@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .authorizeHttpRequests(auth -> auth
            .requestMatchers("/signup", "/login", "/css/**", "/js/**").permitAll()
            .requestMatchers("/admin/**").hasRole("ADMIN")
            .requestMatchers("/home").authenticated() // Only logged-in users can access /home
            .anyRequest().authenticated()
        )
        .formLogin(form -> form
            .loginPage("/login")
            .loginProcessingUrl("/login")
            .defaultSuccessUrl("/home", true)
            .failureHandler(failureHandler) // your CustomAuthFailureHandler
            .permitAll()
        )
        .logout(logout -> logout
            .logoutSuccessUrl("/login?logout")
            .permitAll()
        );

    return http.build();
}

**************************





package com.test.spring.boot.config;

import com.test.spring.boot.UserNotApprovedException;
import com.test.spring.boot.model.AppUser;
import com.test.spring.boot.repository.UserRepository;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;
import org.springframework.web.context.annotation.SessionScope;
import java.io.IOException;
import java.util.Optional;

@Component
@SessionScope
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    private final UserRepository userRepository;

    public CustomAuthFailureHandler(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                        HttpServletResponse response,
                                        AuthenticationException exception)
            throws IOException, ServletException {

        String csid = request.getParameter("username");
        String redirectUrl = "/login?error";

        Optional<AppUser> optionalUser = userRepository.findByCsid(csid);
        if (optionalUser.isPresent()) {
            AppUser user = optionalUser.get();

            // Count failed login attempts only for approved and unlocked users
            if (user.getStatus() == AppUser.Status.APPROVED && user.isAccountNonLocked()) {
                int newAttempts = user.getFailedAttempts() + 1;
                user.setFailedAttempts(newAttempts);

                if (newAttempts >= 5) {
                    user.setAccountNonLocked(false); // Lock the account
                    redirectUrl = "/login?error=locked";
                }

                userRepository.save(user);
            }
        }

        if (exception.getCause() instanceof UserNotApprovedException) {
            redirectUrl = "/login?error=pending";
        } else if (exception instanceof BadCredentialsException) {
            redirectUrl = "/login?error=badcredentials";
        }

        response.sendRedirect(redirectUrl);
    }
}

**********************
<div class="flip-card__front">
    <div class="title">Log in</div>

    <!-- Error message block -->
    <div th:if="${param.error}" class="error-message" style="color: red; font-weight: bold; text-align: center;">
        <p th:if="${param.error[0] == 'pending'}">Account approval is pending. Please contact admin.</p>
        <p th:if="${param.error[0] == 'badcredentials'}">Username or password is incorrect.</p>
        <p th:if="${param.error[0] == 'locked'}">Your account has been locked due to 5 failed attempts. Contact admin to unlock.</p>
        <p th:if="${param.error[0] != 'pending' and param.error[0] != 'badcredentials' and param.error[0] != 'locked'}">
            An unknown error occurred.
        </p>
    </div>

    <!-- Login form -->
    <form class="flip-card__form" action="/login" method="post">
        <input class="flip-card__input" name="username" placeholder="CS ID" type="text" required>
        <input class="flip-card__input" name="password" placeholder="Password" type="password" required>
        <button class="flip-card__btn">Let's go!</button>
    </form>
</div>


***********************
@Component
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    @Autowired
    private UserRepository userRepository;

    private static final int MAX_FAILED_ATTEMPTS = 5;

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                        HttpServletResponse response,
                                        AuthenticationException exception)
            throws IOException, ServletException {

        String username = request.getParameter("username");

        userRepository.findByUsername(username).ifPresent(user -> {
            if (user.getStatus() == AppUser.Status.APPROVED && user.isAccountNonLocked()) {
                int attempts = user.getFailedAttempts() + 1;
                user.setFailedAttempts(attempts);
                if (attempts >= MAX_FAILED_ATTEMPTS) {
                    user.setAccountNonLocked(false);
                }
                userRepository.save(user);
            }
        });

        response.sendRedirect("/login?error=invalid");
    }
}


***************#$#$


if (!user.isAccountNonLocked()) {
    throw new LockedException("Account locked due to multiple failed login attempts");
}

Optional<AppUser> findByUsername(String username);

*********************




@Component
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                        HttpServletResponse response,
                                        AuthenticationException exception)
            throws IOException, ServletException {

        String redirectUrl = "/login?error";

        if (exception.getCause() instanceof UserNotApprovedException) {
            redirectUrl = "/login?error=pending";
        } else if (exception instanceof BadCredentialsException) {
            redirectUrl = "/login?error=badcredentials";
        }

        response.sendRedirect(redirectUrl);
    }
}

†***†*****************


<!-- Display login error messages -->
<div th:if="${param.error}" style="color: red; font-weight: bold; margin-bottom: 10px;">
    <span th:switch="${param.error}">
        <span th:case="'pending'">Account approval is pending. Please contact Admin.</span>
        <span th:case="'badcredentials'">Username or Password is incorrect.</span>
        <span th:case="*">An unknown error occurred.</span>
    </span>
</div>


*************************

<!-- Place this inside <body> before or inside the form section -->
<div th:if="${param.error}" class="error-message">
    <p th:switch="${param.error}">
        <span th:case="'pending'">Account approval is pending. Please contact Admin for approval.</span>
        <span th:case="'invalid'">Username or password is incorrect.</span>
        <span th:case="'locked'">Your account is locked. Please contact Admin.</span>
        <span th:case="*">An unknown error occurred.</span>
    </p>
</div>


.error-message {
  color: red;
  font-weight: bold;
  margin-bottom: 10px;
  text-align: center;
}

<p th:if="${param.error != null}">
    <span th:if="${param.error[0] == 'pending'}" style="color:red;">Account approval is pending. Please contact Admin for approval.</span>
    <span th:if="${param.error[0] == 'invalid'}" style="color:red;">Username or password is incorrect.</span>
    <span th:if="${param.error[0] == 'locked'}" style="color:red;">Your account is locked. Please contact Admin.</span>
    <span th:if="${param.error[0] != 'pending' and param.error[0] != 'invalid' and param.error[0] != 'locked'}" style="color:red;">An unknown error occurred.</span>
</p>

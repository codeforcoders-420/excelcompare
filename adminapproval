@GetMapping("/admin/pending-users")
public String showPendingUsers(Model model) {
    List<AppUser> pendingUsers = userService.getPendingUsers();
    model.addAttribute("users", pendingUsers);
    return "pending-users"; // This maps to pending-users.html
}

****************************************************************

<!-- Show this only if the user has ADMIN role -->
<div th:if="${#authorization.expression('hasRole(''ADMIN'')')}">
    <a href="/admin/pending-users" class="btn btn-primary">Pending Approvals</a>
</div>

****************************************************************

public List<AppUser> getPendingUsers() {
    return userRepository.findByStatus(AppUser.Status.PENDING);
}

*****************************************************************

List<AppUser> findByStatus(AppUser.Status status);

*******************************************************************

<!-- Pending Approvals Button (Visible only for Admin) -->
<div th:if="${role == 'ADMIN'}">
  <button onclick="openPendingModal()">Pending Approvals</button>
</div>

<!-- Modal Popup -->
<div id="pendingModal" class="modal" style="display:none;">
  <div class="modal-content">
    <span class="close" onclick="closePendingModal()">&times;</span>
    <div th:replace="::pendingUsersContent"></div> <!-- Fragment inserted here -->
  </div>
</div>

<!-- Add modal CSS and JS -->
<style>
.modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.4); }
.modal-content { background-color: #fff; margin: 10% auto; padding: 20px; width: 70%; }
.close { float: right; font-size: 24px; cursor: pointer; }
</style>

<script>
  function openPendingModal() {
    document.getElementById("pendingModal").style.display = "block";
  }
  function closePendingModal() {
    document.getElementById("pendingModal").style.display = "none";
  }
</script>

*********************************************************************

@GetMapping("/home")
public String home(Authentication auth, Model model) {
    String csid = auth.getName();
    AppUser user = userRepository.findByCsid(csid).orElse(null);

    if (user != null) {
        model.addAttribute("username", user.getFullName());
        model.addAttribute("role", csid.equals("admin") ? "ADMIN" : "USER");

        // Only for admin users
        if ("admin".equalsIgnoreCase(csid)) {
            List<AppUser> pendingUsers = userService.getPendingUsers();
            model.addAttribute("pendingUsers", pendingUsers);
        }
    }
    return "homepage";
}

******************************************************************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<body>
  <div th:fragment="pendingUsersContent">
    <h2>Pending User Approvals</h2>
    <table border="1">
      <tr>
        <th>ID</th>
        <th>Full Name</th>
        <th>Email</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
      <tr th:each="user : ${pendingUsers}">
        <td th:text="${user.id}"></td>
        <td th:text="${user.fullName}"></td>
        <td th:text="${user.csemail}"></td>
        <td th:text="${user.status}"></td>
        <td>
          <form th:action="@{'/admin/approve/' + ${user.id}}" method="post">
            <button type="submit">Approve</button>
          </form>
        </td>
      </tr>
    </table>
  </div>
</body>
</html>


****************************************************************


























@Column(nullable = false)
private String role; // "ADMIN" or "ANALYST"

// Getter and Setter
public String getRole() {
    return role;
}

public void setRole(String role) {
    this.role = role;
}

********************************************

<select class="flip-card__input" th:field="*{role}" name="role" required>
    <option value="">Select Role</option>
    <option value="ADMIN">Admin</option>
    <option value="ANALYST">Analyst</option>
</select>

**************************************

boolean isAdmin = "ADMIN".equalsIgnoreCase(user.getRole());

return User.withUsername(user.getCsid())
        .password(user.getPassword())
        .roles(isAdmin ? "ADMIN" : "ANALYST")
        .accountLocked(!user.isAccountNonLocked())
        .build();

*****************************************

ALTER TABLE USERS ADD COLUMN ROLE VARCHAR(20);

**********************************



















































@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .authorizeHttpRequests(auth -> auth
            .requestMatchers("/login", "/signup", "/css/**", "/js/**").permitAll()
            .requestMatchers("/admin/**").hasRole("ADMIN")
            .anyRequest().authenticated()
        )
        .formLogin(form -> form
            .loginPage("/login")
            .loginProcessingUrl("/login")
            .defaultSuccessUrl("/home", true)
            .failureHandler(failureHandler)
            .permitAll()
        )
        .logout(logout -> logout
            .logoutUrl("/logout")
            .logoutSuccessUrl("/login?logout")
            .permitAll()
        )
        .sessionManagement(session -> session
            .maximumSessions(1)
            .maxSessionsPreventsLogin(false)
        );

    return http.build();
}

**********************************************************


@GetMapping("/home")
public String home(Authentication auth, Model model) {
    String csid = auth.getName();  // This gives us the logged-in CSID
    AppUser user = userRepository.findByCsid(csid).orElse(null);

    if (user != null) {
        model.addAttribute("username", user.getFullName());  // ✅ Pass full name to view
    } else {
        model.addAttribute("username", "User");
    }

    return "home";
}

************************************

Hello, <span th:text="${username}">User</span>


*****************************************************************



<div class="user-dropdown">
    <span class="username-toggle" onclick="toggleDropdown()">
        Hello, <span th:text="${username}">User</span> ▼
    </span>
    <div id="dropdown-menu" class="dropdown-content" style="display:none;">
        <form th:action="@{/logout}" method="post">
            <button type="submit">Logout</button>
        </form>
    </div>
</div>


*************************************************

.user-dropdown {
    position: relative;
    display: inline-block;
    float: right;
    margin-right: 20px;
}

.username-toggle {
    cursor: pointer;
    font-weight: bold;
    color: #000;
}

.dropdown-content {
    position: absolute;
    background-color: #f1f1f1;
    min-width: 120px;
    right: 0;
    box-shadow: 0px 8px 16px rgba(0,0,0,0.2);
    z-index: 1;
}

.dropdown-content form {
    margin: 0;
    padding: 10px;
    text-align: left;
}

****************************************************************

<script>
    function toggleDropdown() {
        var menu = document.getElementById("dropdown-menu");
        menu.style.display = menu.style.display === "block" ? "none" : "block";
    }

    // Optional: close dropdown when clicking outside
    window.onclick = function(event) {
        if (!event.target.matches('.username-toggle')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            for (let i = 0; i < dropdowns.length; i++) {
                dropdowns[i].style.display = "none";
            }
        }
    }
</script>

ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", "schtasks /run /tn \"RunPeerReviewMacro\"");

Map<String, String> env = builder.environment();
env.put("USER_NAME", System.getProperty("user.name"));
env.put("CURRENT_DATE", LocalDate.now().toString());
env.put("FEE_SCHEDULE", "FS123");
env.put("INPUT_PATH", "C:\\Path\\To\\Input\\MacroTemplate.xlsm");
env.put("OUTPUT_PATH", "C:\\Path\\To\\Output\\FinalOutput.xlsx");

Process process = builder.start();
int exitCode = process.waitFor();
System.out.println("Task triggered, exit code: " + exitCode);

***********************************************************************

$UserName     = $env:USER_NAME
$CurrentDate  = $env:CURRENT_DATE
$FeeSchedule  = $env:FEE_SCHEDULE
$InputPath    = $env:INPUT_PATH
$OutputPath   = $env:OUTPUT_PATH

# Open Excel and load workbook
$excel = New-Object -ComObject Excel.Application
$workbook = $excel.Workbooks.Open($InputPath)
$sheet = $workbook.Sheets.Item(1)

# Write values to specific cells
$sheet.Range("B2").Value() = $UserName
$sheet.Range("B3").Value() = $CurrentDate
$sheet.Range("B4").Value() = $FeeSchedule

# Optional: Refresh data connections or run macro
$excel.DisplayAlerts = $false
$excel.Run("RefreshAll")

# Save to output path and close
$workbook.SaveAs($OutputPath)
$workbook.Close($false)
$excel.Quit()

****************************************************************

# Read environment variables
$UserName = $env:USER_NAME
$CurrentDate = $env:CURRENT_DATE
$FeeSchedule = $env:FEE_SCHEDULE
$InputPath = $env:INPUT_PATH
$OutputPath = $env:OUTPUT_PATH

# Log for debugging (optional)
Write-Host "Running macro as $UserName on $CurrentDate for Fee Schedule $FeeSchedule"
Write-Host "Input File: $InputPath"
Write-Host "Output File: $OutputPath"

# Launch Excel and run macro
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$excel.DisplayAlerts = $false

# Open the macro-enabled workbook
$workbook = $excel.Workbooks.Open($InputPath)

# Pass values to Excel macro via named range or use a parameterless macro if self-contained
# Example: Call macro named RunPeerReview
$excel.Run("RunPeerReview")

# Save output to specified path
$workbook.SaveAs($OutputPath)

# Cleanup
$workbook.Close($false)
$excel.Quit()
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
[GC]::Collect()
[GC]::WaitForPendingFinalizers()



-ExecutionPolicy Bypass -File "C:\Scripts\RunPeerReviewMacro.ps1"

****************************************************************************

$UserName    = $env:USER_NAME
$CurrentDate = $env:CURRENT_DATE
$FeeSchedule = $env:FEE_SCHEDULE
$InputPath   = $env:INPUT_PATH
$OutputPath  = $env:OUTPUT_PATH

$logFile = "C:\Scripts\MacroLog.txt"
"[$(Get-Date)] Starting Excel Update..." | Out-File $logFile -Append
"UserName=$UserName, Date=$CurrentDate, FS=$FeeSchedule" | Out-File $logFile -Append
"InputPath=$InputPath" | Out-File $logFile -Append
"OutputPath=$OutputPath" | Out-File $logFile -Append

try {
    $excel = New-Object -ComObject Excel.Application
    $excel.Visible = $false
    $excel.DisplayAlerts = $false

    $workbook = $excel.Workbooks.Open($InputPath)
    $sheet = $workbook.Sheets.Item(1)  # Update this if you're using a specific sheet

    # Update cells with input values
    $sheet.Cells.Item(2, 1).Value2 = $UserName     # Example: Cell A2
    $sheet.Cells.Item(2, 2).Value2 = $CurrentDate  # Example: Cell B2
    $sheet.Cells.Item(2, 3).Value2 = $FeeSchedule  # Example: Cell C2

    "[$(Get-Date)] Values updated. Refreshing all data..." | Out-File $logFile -Append
    $workbook.RefreshAll()
    
    Start-Sleep -Seconds 5  # Optional: give Excel time to refresh

    "[$(Get-Date)] Saving workbook..." | Out-File $logFile -Append
    $workbook.SaveAs($OutputPath)

    $workbook.Close($true)
    $excel.Quit()

    "[$(Get-Date)] Excel update completed successfully." | Out-File $logFile -Append
}
catch {
    "[$(Get-Date)] ERROR: $_" | Out-File $logFile -Append
}
finally {
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($sheet) | Out-Null
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
    [GC]::Collect()
    [GC]::WaitForPendingFinalizers()
}

****************************************
******************************************


String inputText = String.join("\n",
    "USER_NAME=" + System.getProperty("user.name"),
    "CURRENT_DATE=" + LocalDate.now().toString(),
    "FEE_SCHEDULE=FS123",
    "INPUT_PATH=C:\\Path\\To\\Input\\MacroTemplate.xlsm",
    "OUTPUT_PATH=C:\\Path\\To\\Output\\FinalOutput.xlsx"
);

// Save to a known file path
Path inputFilePath = Paths.get("C:/Scripts/input_env.txt");
Files.write(inputFilePath, inputText.getBytes());

***************************************

# Load key=value pairs from temp file into $env
$envFile = "C:\Scripts\input_env.txt"
if (Test-Path $envFile) {
    Get-Content $envFile | ForEach-Object {
        if ($_ -match "^(.*?)=(.*)$") {
            $envName = $matches[1].Trim()
            $envValue = $matches[2].Trim()
            [System.Environment]::SetEnvironmentVariable($envName, $envValue, "Process")
        }
    }
}

ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", "schtasks /run /tn \"RunPeerReviewMacro\"");
builder.start();



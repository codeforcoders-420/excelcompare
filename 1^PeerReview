public static String getCellValue(Row row, int cellIndex) {
    if (row == null) return "";
    Cell cell = row.getCell(cellIndex);
    if (cell == null) return "";
    return switch (cell.getCellType()) {
        case STRING -> cell.getStringCellValue();
        case NUMERIC -> String.valueOf(cell.getNumericCellValue());
        case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
        case FORMULA -> cell.getCellFormula();
        default -> cell.toString();
    };
}

*******************************

dbRows.add(new DbRow(
    normalize(getCellValue(r, 1)),
    normalize(getCellValue(r, 2)),
    normalize(getCellValue(r, 3)),
    normalize(getCellValue(r, 4)),
    normalize(getCellValue(r, 5)),
    normalize(getCellValue(r, 6)),
    normalize(getCellValue(r, 7)),
    normalize(getCellValue(r, 8)),
    normalizeRate(getCellValue(r, 9))
));







































public static void validateUsingTemplate(String userFilePath, String dbFilePath, String templatePath, String outputPath) throws Exception {
    try (
        FileInputStream userFis = new FileInputStream(userFilePath);
        FileInputStream dbFis = new FileInputStream(dbFilePath);
        FileInputStream templateFis = new FileInputStream(templatePath);
        Workbook userWb = new XSSFWorkbook(userFis);
        Workbook dbWb = new XSSFWorkbook(dbFis);
        Workbook templateWb = new XSSFWorkbook(templateFis) // Note: XSSFWorkbook supports .xlsm too
    ) {
        Sheet userSheet = userWb.getSheetAt(0);
        Sheet dbSheet = dbWb.getSheetAt(0);
        Sheet targetSheet = templateWb.getSheet("RPA Change File Vs CFG");

        if (targetSheet == null) throw new RuntimeException("Sheet 'RPA Change File Vs CFG' not found in template.");

        // STEP 1: Copy userSheet rows into template sheet
        for (int i = 0; i <= userSheet.getLastRowNum(); i++) {
            Row sourceRow = userSheet.getRow(i);
            Row targetRow = targetSheet.createRow(i);
            if (sourceRow == null) continue;

            for (int j = 0; j < sourceRow.getLastCellNum(); j++) {
                Cell newCell = targetRow.createCell(j);
                Cell oldCell = sourceRow.getCell(j);
                if (oldCell != null) {
                    switch (oldCell.getCellType()) {
                        case STRING -> newCell.setCellValue(oldCell.getStringCellValue());
                        case NUMERIC -> newCell.setCellValue(oldCell.getNumericCellValue());
                        case BOOLEAN -> newCell.setCellValue(oldCell.getBooleanCellValue());
                        default -> newCell.setCellValue(oldCell.toString());
                    }
                }
            }
        }

        // STEP 2: Build DB Index
        List<DbRow> dbRows = new ArrayList<>();
        for (int i = 1; i <= dbSheet.getLastRowNum(); i++) {
            Row r = dbSheet.getRow(i);
            dbRows.add(new DbRow(
                normalize(r.getCell(1).toString()), normalize(r.getCell(2).toString()),
                normalize(r.getCell(3).toString()), normalize(r.getCell(4).toString()),
                normalize(r.getCell(5).toString()), normalize(r.getCell(6).toString()),
                normalize(r.getCell(7).toString()), normalize(r.getCell(8).toString()),
                normalizeRate(r.getCell(9).toString())
            ));
        }

        Map<MatchKey, List<DbRow>> dbIndex = dbRows.stream()
            .collect(Collectors.groupingBy(row ->
                new MatchKey(row.proc(), row.mod1(), row.mod2(), row.mod3(), row.mod4(),
                             row.endDate(), row.pricingMethod(), row.rate())
            ));

        // STEP 3: Apply validation directly in template sheet
        Row headerRow = targetSheet.getRow(0);
        int resultColIndex = headerRow.getLastCellNum();
        headerRow.createCell(resultColIndex).setCellValue("Validation Results");

        for (int i = 1; i <= targetSheet.getLastRowNum(); i++) {
            Row row = targetSheet.getRow(i);
            if (row == null) continue;

            UserRow user = new UserRow(
                normalize(row.getCell(1).toString()), normalize(row.getCell(2).toString()),
                normalize(row.getCell(3).toString()), normalize(row.getCell(4).toString()),
                normalize(row.getCell(5).toString()), normalize(row.getCell(6).toString()),
                normalize(row.getCell(7).toString()), normalize(row.getCell(8).toString()),
                normalizeRate(row.getCell(9).toString()), normalize(row.getCell(11).toString())
            );

            MatchKey key = new MatchKey(user.proc(), user.mod1(), user.mod2(), user.mod3(), user.mod4(),
                                        user.endDate(), user.pricingMethod(), user.newRate());

            List<DbRow> matches = dbIndex.getOrDefault(key, List.of());

            if ("NEW CODE".equals(user.comment())) {
                matches = matches.stream()
                    .filter(m -> m.effDate().equals(user.effDate()))
                    .collect(Collectors.toList());
            }

            String result = matches.size() == 1 ? "Pass" : "Fail";
            row.createCell(resultColIndex).setCellValue(result);
        }

        try (FileOutputStream fos = new FileOutputStream(outputPath)) {
            templateWb.write(fos); // Save updated .xlsm with validation results
        }

        System.out.println("Validation completed and written to: " + outputPath);
    }
}


***********************************************************************



public static void validateExcelFiles(String userFilePath, String tempDbFilePath, String outputPath) throws Exception {
    try (
        FileInputStream userFis = new FileInputStream(userFilePath);
        FileInputStream dbFis = new FileInputStream(tempDbFilePath);
        Workbook userWb = new XSSFWorkbook(userFis);
        Workbook dbWb = new XSSFWorkbook(dbFis)
    ) {
        Sheet userSheet = userWb.getSheetAt(0);
        Sheet dbSheet = dbWb.getSheetAt(0);

        // 1. Load DB records
        List<DbRow> dbRows = new ArrayList<>();
        for (int i = 1; i <= dbSheet.getLastRowNum(); i++) {
            Row r = dbSheet.getRow(i);
            dbRows.add(new DbRow(
                normalize(r.getCell(1).toString()), normalize(r.getCell(2).toString()),
                normalize(r.getCell(3).toString()), normalize(r.getCell(4).toString()),
                normalize(r.getCell(5).toString()), normalize(r.getCell(6).toString()),
                normalize(r.getCell(7).toString()), normalize(r.getCell(8).toString()),
                normalizeRate(r.getCell(9).toString())
            ));
        }

        // 2. Build Index Map for Fast Lookup
        Map<MatchKey, List<DbRow>> dbIndex = dbRows.stream()
            .collect(Collectors.groupingBy(row ->
                new MatchKey(row.proc(), row.mod1(), row.mod2(), row.mod3(), row.mod4(),
                             row.endDate(), row.pricingMethod(), row.rate())
            ));

        // 3. Append "Validation Results" Header
        Row headerRow = userSheet.getRow(0);
        int resultColIndex = headerRow.getLastCellNum(); // Next available column
        headerRow.createCell(resultColIndex).setCellValue("Validation Results");

        // 4. Validate each user row
        for (int i = 1; i <= userSheet.getLastRowNum(); i++) {
            Row row = userSheet.getRow(i);
            if (row == null) continue;

            UserRow user = new UserRow(
                normalize(row.getCell(1).toString()), normalize(row.getCell(2).toString()),
                normalize(row.getCell(3).toString()), normalize(row.getCell(4).toString()),
                normalize(row.getCell(5).toString()), normalize(row.getCell(6).toString()),
                normalize(row.getCell(7).toString()), normalize(row.getCell(8).toString()),
                normalizeRate(row.getCell(9).toString()), normalize(row.getCell(11).toString())
            );

            MatchKey key = new MatchKey(user.proc(), user.mod1(), user.mod2(), user.mod3(), user.mod4(),
                                        user.endDate(), user.pricingMethod(), user.newRate());

            List<DbRow> matches = dbIndex.getOrDefault(key, List.of());

            if (user.comment().equals("NEW CODE")) {
                matches = matches.stream()
                    .filter(m -> m.effDate().equals(user.effDate()))
                    .collect(Collectors.toList());
            }

            String result = matches.size() == 1 ? "Pass" : "Fail";
            row.createCell(resultColIndex).setCellValue(result);
        }

        // 5. Save back to file
        try (FileOutputStream fos = new FileOutputStream(outputPath)) {
            userWb.write(fos);
        }

        System.out.println("Validation complete. Output written to: " + outputPath);
    }
}


*********************************************************************************



import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class PeerReviewValidator {

    public record MatchKey(String proc, String mod1, String mod2, String mod3, String mod4,
                           String endDate, String pricingMethod, String rate) {}

    public record DbRow(String proc, String mod1, String mod2, String mod3, String mod4,
                        String effDate, String endDate, String pricingMethod, String rate) {}

    public record UserRow(String proc, String mod1, String mod2, String mod3, String mod4,
                          String effDate, String endDate, String pricingMethod,
                          String newRate, String comment) {}

    public static String normalize(String val) {
        return val == null ? "" : val.trim().toUpperCase();
    }

    public static String normalizeRate(String val) {
        try {
            return String.format("%.4f", Double.parseDouble(val.replace("$", "").trim()));
        } catch (Exception e) {
            return "0.0000";
        }
    }

    public static void validateExcelFiles(String userFilePath, String tempDbFilePath, String outputPath) throws Exception {
        try (
            FileInputStream userFis = new FileInputStream(userFilePath);
            FileInputStream dbFis = new FileInputStream(tempDbFilePath);
            Workbook userWb = new XSSFWorkbook(userFis);
            Workbook dbWb = new XSSFWorkbook(dbFis);
            Workbook outWb = new XSSFWorkbook()
        ) {
            Sheet userSheet = userWb.getSheetAt(0);
            Sheet dbSheet = dbWb.getSheetAt(0);
            Sheet outSheet = outWb.createSheet("Validation Result");

            List<UserRow> userRows = new ArrayList<>();
            for (int i = 1; i <= userSheet.getLastRowNum(); i++) {
                Row r = userSheet.getRow(i);
                userRows.add(new UserRow(
                    normalize(r.getCell(1).toString()), normalize(r.getCell(2).toString()),
                    normalize(r.getCell(3).toString()), normalize(r.getCell(4).toString()),
                    normalize(r.getCell(5).toString()), normalize(r.getCell(6).toString()),
                    normalize(r.getCell(7).toString()), normalize(r.getCell(8).toString()),
                    normalizeRate(r.getCell(9).toString()), normalize(r.getCell(11).toString())
                ));
            }

            List<DbRow> dbRows = new ArrayList<>();
            for (int i = 1; i <= dbSheet.getLastRowNum(); i++) {
                Row r = dbSheet.getRow(i);
                dbRows.add(new DbRow(
                    normalize(r.getCell(1).toString()), normalize(r.getCell(2).toString()),
                    normalize(r.getCell(3).toString()), normalize(r.getCell(4).toString()),
                    normalize(r.getCell(5).toString()), normalize(r.getCell(6).toString()),
                    normalize(r.getCell(7).toString()), normalize(r.getCell(8).toString()),
                    normalizeRate(r.getCell(9).toString())
                ));
            }

            Map<MatchKey, List<DbRow>> dbIndex = dbRows.stream()
                .collect(Collectors.groupingBy(row ->
                    new MatchKey(row.proc(), row.mod1(), row.mod2(), row.mod3(), row.mod4(),
                                 row.endDate(), row.pricingMethod(), row.rate())
                ));

            // Header
            Row header = outSheet.createRow(0);
            header.createCell(0).setCellValue("Procedure Code");
            header.createCell(1).setCellValue("New Rate");
            header.createCell(2).setCellValue("Comments");
            header.createCell(3).setCellValue("Validation Result");

            int rowNum = 1;
            for (UserRow u : userRows) {
                MatchKey key = new MatchKey(u.proc(), u.mod1(), u.mod2(), u.mod3(), u.mod4(),
                                            u.endDate(), u.pricingMethod(), u.newRate());

                List<DbRow> matches = dbIndex.getOrDefault(key, List.of());

                if (u.comment().equals("NEW CODE")) {
                    matches = matches.stream()
                        .filter(d -> d.effDate().equals(u.effDate()))
                        .collect(Collectors.toList());
                }

                String result = matches.size() == 1 ? "Match Found" : "No Match Found";

                Row outRow = outSheet.createRow(rowNum++);
                outRow.createCell(0).setCellValue(u.proc());
                outRow.createCell(1).setCellValue(u.newRate());
                outRow.createCell(2).setCellValue(u.comment());
                outRow.createCell(3).setCellValue(result);
            }

            try (FileOutputStream fos = new FileOutputStream(outputPath)) {
                outWb.write(fos);
            }

            System.out.println("Validation completed. Output written to: " + outputPath);
        }
    }
}
*****************************************************************

public void runQueryAndWriteToExcel(String query, String tempFilePath, Connection conn) throws Exception {
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery(query);

    Workbook workbook = new XSSFWorkbook();
    Sheet sheet = workbook.createSheet("DB_Data");

    // Write header
    ResultSetMetaData metaData = rs.getMetaData();
    int columnCount = metaData.getColumnCount();
    Row header = sheet.createRow(0);
    for (int i = 1; i <= columnCount; i++) {
        header.createCell(i - 1).setCellValue(metaData.getColumnName(i));
    }

    // Write data rows
    int rowIndex = 1;
    while (rs.next()) {
        Row row = sheet.createRow(rowIndex++);
        for (int i = 1; i <= columnCount; i++) {
            row.createCell(i - 1).setCellValue(rs.getString(i));
        }
    }

    try (FileOutputStream fos = new FileOutputStream(tempFilePath)) {
        workbook.write(fos);
    }
    workbook.close();
}

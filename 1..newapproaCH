import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.sql.*;
import java.util.*;

public class ExcelQueryExporter {

    static class QueryJob {
        String sheetName;
        String sql;
        String environment;

        QueryJob(String sheetName, String sql, String environment) {
            this.sheetName = sheetName;
            this.sql = sql;
            this.environment = environment.toUpperCase();
        }
    }

    public static List<QueryJob> readQueryJobsFromExcel(String queryExcelPath, String sheetName) throws IOException {
        List<QueryJob> jobs = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(queryExcelPath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheet(sheetName);
            if (sheet == null) throw new IllegalArgumentException("Sheet '" + sheetName + "' not found.");

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String sheetNameStr = row.getCell(0).getStringCellValue().trim();
                String query = row.getCell(1).getStringCellValue().trim();
                String env = row.getCell(2).getStringCellValue().trim();

                if (!sheetNameStr.isEmpty() && !query.isEmpty() && !env.isEmpty()) {
                    jobs.add(new QueryJob(sheetNameStr, query, env));
                }
            }
        }
        return jobs;
    }

    public static void executeAndWriteQueries(
            List<QueryJob> jobs,
            Connection sitConn,
            Connection prodConn,
            String templatePath,
            String outputPath
    ) throws Exception {

        try (
            FileInputStream fis = new FileInputStream(templatePath);
            Workbook workbook = new XSSFWorkbook(fis)
        ) {
            for (QueryJob job : jobs) {
                System.out.println("Running query for sheet: " + job.sheetName + " [" + job.environment + "]");

                Connection conn = job.environment.equals("PROD") ? prodConn : sitConn;

                try (
                    Statement stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rs = stmt.executeQuery(job.sql)
                ) {
                    Sheet sheet = workbook.getSheet(job.sheetName());
                    if (sheet == null) sheet = workbook.createSheet(job.sheetName);

                    // Preserve formatting: Clear all data rows but keep header
                    int headerRowIndex = 0;
                    int lastRow = sheet.getLastRowNum();
                    for (int i = lastRow; i > headerRowIndex; i--) {
                        Row row = sheet.getRow(i);
                        if (row != null) sheet.removeRow(row);
                    }

                    // Write headers (replace row 0)
                    ResultSetMetaData meta = rs.getMetaData();
                    int columnCount = meta.getColumnCount();
                    Row headerRow = sheet.getRow(headerRowIndex);
                    if (headerRow == null) headerRow = sheet.createRow(headerRowIndex);
                    for (int i = 1; i <= columnCount; i++) {
                        Cell cell = headerRow.getCell(i - 1);
                        if (cell == null) cell = headerRow.createCell(i - 1);
                        cell.setCellValue(meta.getColumnName(i));
                    }

                    // Write data rows starting from row 1
                    int rowIdx = 1;
                    while (rs.next()) {
                        Row row = sheet.createRow(rowIdx++);
                        for (int i = 1; i <= columnCount; i++) {
                            Object value = rs.getObject(i);
                            row.createCell(i - 1).setCellValue(value != null ? value.toString() : "");
                        }
                    }

                    System.out.println("→ Wrote " + (rowIdx - 1) + " rows to sheet: " + job.sheetName);
                }
            }

            // Save updated workbook to new output path
            try (FileOutputStream fos = new FileOutputStream(outputPath)) {
                workbook.write(fos);
            }

            System.out.println("✅ Workbook saved to: " + outputPath);
        }
    }

    public static void main(String[] args) throws Exception {
        String queryExcelPath = "C:/MacroFiles/QueryList.xlsx";
        String querySheet = "Queries";

        String templatePath = "C:/MacroFiles/PowerBI_Template.xlsx";
        String outputPath = "C:/Reports/PowerBI_Report_Updated.xlsx";

        String sitJdbc = "jdbc:sqlserver://SIT_SERVER;databaseName=DB1;integratedSecurity=true;";
        String prodJdbc = "jdbc:sqlserver://PROD_SERVER;databaseName=DB1;integratedSecurity=true;";

        List<QueryJob> jobs = readQueryJobsFromExcel(queryExcelPath, querySheet);

        try (
            Connection sitConn = DriverManager.getConnection(sitJdbc);
            Connection prodConn = DriverManager.getConnection(prodJdbc)
        ) {
            executeAndWriteQueries(jobs, sitConn, prodConn, templatePath, outputPath);
        }
    }
}

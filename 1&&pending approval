<tr th:each="user : ${users}">
    <td th:text="${user.id}"></td>
    <td th:text="${user.fullName}"></td>
    <td th:text="${user.status}"></td>
    <td>
        <button th:if="${user.status.name() == 'PENDING'}"
                th:onclick="'updateUserStatus(' + ${user.id} + ', \'approve\')'"
                class="approve-btn">Approve</button>

        <button th:if="${user.status.name() == 'APPROVED'}"
                th:onclick="'updateUserStatus(' + ${user.id} + ', \'cancel\')'"
                class="cancel-btn">Cancel Access</button>
    </td>
</tr>


******************************











@PostMapping("/admin/approve/{id}")
public String approveUser(@PathVariable Long id, Model model) {
    AppUser user = userRepository.findById(id).orElseThrow();
    user.setStatus(AppUser.Status.APPROVED);
    userRepository.save(user);

    List<AppUser> pendingUsers = userRepository.findAll().stream()
        .filter(u -> u.getRole() != AppUser.Role.ADMIN)
        .collect(Collectors.toList());

    model.addAttribute("pendingUsers", pendingUsers);
    return "pending-users-fragment :: pendingUsersTable";
}

****************************************************************

<button th:if="${user.status.name() == 'PENDING'}"
        th:attr="onclick=|updateUserStatus('${user.id}', 'approve')|"
        class="approve-btn">Approve</button>

<button th:if="${user.status.name() == 'APPROVED'}"
        th:attr="onclick=|updateUserStatus('${user.id}', 'cancel')|"
        class="cancel-btn">Cancel Access</button>


****************************************************************























@GetMapping("/admin/pendingUsers")
public String showPendingUsers(Model model, Authentication auth) {
    String currentUserCsid = auth.getName(); // Logged-in user

    List<AppUser> pendingUsers = userRepository.findAll().stream()
        .filter(user -> !user.getRole().name().equals("ADMIN"))          // Exclude admins
        .filter(user -> !user.getCsid().equalsIgnoreCase(currentUserCsid)) // Exclude self
        .collect(Collectors.toList());

    model.addAttribute("pendingUsers", pendingUsers);
    return "pending-users-fragment :: pendingUsersTable";
}

*****************************************************************

<button th:if="${user.status.name() == 'PENDING'}"
        th:attr="onclick=|updateUserStatus('${user.id}', 'approve')|"
        class="approve-btn">Approve</button>

<button th:if="${user.status.name() == 'APPROVED'}"
        th:attr="onclick=|updateUserStatus('${user.id}', 'cancel')|"
        class="cancel-btn">Cancel Access</button>

*******************************************************************





















<div th:fragment="pendingUsersContent">
  <h2>Pending User Approvals</h2>
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Full Name</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    
    <!-- ðŸ”½ This is the only part you want AJAX to replace -->
    <tbody id="pendingUsersTable" th:fragment="pendingUsersTable">
      <tr th:each="user : ${pendingUsers}">
        <td th:text="${user.id}"></td>
        <td th:text="${user.fullName}"></td>
        <td th:text="${user.status}"></td>
        <td>
          <button th:if="${user.status.name() == 'PENDING'}"
                  th:onclick="'updateUserStatus(' + ${user.id} + ', \'approve\')'"
                  class="approve-btn">Approve</button>

          <button th:if="${user.status.name() == 'APPROVED'}"
                  th:onclick="'updateUserStatus(' + ${user.id} + ', \'cancel\')'"
                  class="cancel-btn">Cancel Access</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


*******************************************************




<!-- Approve button: shown if status is PENDING -->
<button th:if="${user.status.name() == 'PENDING'}"
        th:onclick="'updateUserStatus(' + ${user.id} + ', \'approve\')'"
        class="approve-btn">Approve</button>

<!-- Cancel button: shown if status is APPROVED -->
<button th:if="${user.status.name() == 'APPROVED'}"
        th:onclick="'updateUserStatus(' + ${user.id} + ', \'cancel\')'"
        class="cancel-btn">Cancel Access</button>


************************

.approve-btn {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 6px 10px;
    border-radius: 4px;
}

.cancel-btn {
    background-color: crimson;
    color: white;
    border: none;
    padding: 6px 10px;
    border-radius: 4px;
}


******************************






<div id="pendingUsersTable">
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Full Name</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr th:each="user : ${pendingUsers}">
        <td th:text="${user.id}"></td>
        <td th:text="${user.fullName}"></td>
        <td th:text="${user.status}"></td>
        <td>
          <button th:if="${user.status.name() == 'PENDING'}"
                  onclick="updateUserStatus([[${user.id}]], 'approve')" class="approve-btn">Approve</button>

          <button th:if="${user.status.name() == 'APPROVED'}"
                  onclick="updateUserStatus([[${user.id}]], 'cancel')" class="cancel-btn">Cancel Access</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>



******************************

@PostMapping("/admin/approve/{id}")
public String approveUser(@PathVariable Long id, Model model) {
    AppUser user = userRepository.findById(id).orElseThrow();
    user.setStatus(AppUser.Status.APPROVED);
    userRepository.save(user);
    model.addAttribute("pendingUsers", userRepository.findAll());
    return "pending-users-fragment :: pendingUsersTable";
}

@PostMapping("/admin/cancel/{id}")
public String cancelUser(@PathVariable Long id, Model model) {
    AppUser user = userRepository.findById(id).orElseThrow();
    user.setStatus(AppUser.Status.PENDING);
    userRepository.save(user);
    model.addAttribute("pendingUsers", userRepository.findAll());
    return "pending-users-fragment :: pendingUsersTable";
}

*******************************

<script>
function updateUserStatus(userId, action) {
    const endpoint = `/admin/${action}/${userId}`;

    fetch(endpoint, {
        method: 'POST'
    })
    .then(response => response.text())
    .then(fragment => {
        document.getElementById("pendingUsersTable").innerHTML = fragment;
    })
    .catch(err => {
        alert("Something went wrong: " + err);
    });
}
</script>



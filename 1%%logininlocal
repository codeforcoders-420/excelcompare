@GetMapping("/admin/pending-users")
public String showPendingUsers(Model model) {
    List<AppUser> pendingUsers = userService.getPendingUsers();
    model.addAttribute("users", pendingUsers);
    return "pending-users";
}

@PostMapping("/admin/approve/{id}")
public String approveUser(@PathVariable Long id) {
    userService.approveUser(id);
    return "redirect:/admin/pending-users";
}

*****************************************************************

src/main/resources/templates/pending-users.html

***************************************************************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Pending Users</title>
</head>
<body>
    <h2>Pending User Approvals</h2>
    <table border="1">
        <tr>
            <th>ID</th>
            <th>Full Name</th>
            <th>Email</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
        <tr th:each="user : ${users}">
            <td th:text="${user.id}"></td>
            <td th:text="${user.fullName}"></td>
            <td th:text="${user.username}"></td>
            <td th:text="${user.status}"></td>
            <td>
                <form th:action="@{'/admin/approve/' + ${user.id}}" method="post">
                    <button type="submit">Approve</button>
                </form>
            </td>
        </tr>
    </table>
</body>
</html>

*****************************************************************

.authorizeHttpRequests(auth -> auth
    .requestMatchers("/admin/**").hasRole("ADMIN")

******************************************************************


















package com.test.spring.boot.config;

import com.test.spring.boot.exception.UserNotApprovedException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.*;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                         HttpServletResponse response,
                                         AuthenticationException exception)
            throws IOException, ServletException {

        String redirectUrl = "/login?error";

        Throwable cause = exception.getCause();
        if (cause instanceof UserNotApprovedException) {
            redirectUrl = "/login?error=pending";
        }

        response.sendRedirect(redirectUrl);
    }
}

*********************************************

package com.test.spring.boot.config;

import com.test.spring.boot.exception.UserNotApprovedException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.*;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                         HttpServletResponse response,
                                         AuthenticationException exception)
            throws IOException, ServletException {

        String redirectUrl = "/login?error";

        if (exception.getCause() instanceof UserNotApprovedException ||
            exception instanceof UserNotApprovedException) {
            redirectUrl = "/login?error=pending";
        }

        response.sendRedirect(redirectUrl);
    }
}

***************************************************************************************

package com.test.spring.boot.config;

import com.test.spring.boot.model.User;
import com.test.spring.boot.repository.UserRepository;
import com.test.spring.boot.exception.UserNotApprovedException;
import com.test.spring.boot.config.CustomAuthFailureHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.*;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomAuthFailureHandler failureHandler;

    private static final String ADMIN_USERNAME = "admin";

    @Bean
    public UserDetailsService userDetailsService() {
        return username -> {
            User user = userRepository.findByUsername(username)
                    .orElseThrow(() -> new UsernameNotFoundException("User not found"));

            if (user.getStatus() != User.Status.APPROVED && !username.equals(ADMIN_USERNAME)) {
                throw new UserNotApprovedException("User not approved");
            }

            boolean isAdmin = username.equals(ADMIN_USERNAME);

            return User.withUsername(user.getUsername())
                    .password(user.getPassword())
                    .roles(isAdmin ? "ADMIN" : "USER")
                    .build();
        };
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider daoAuthenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService());
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/signup", "/login", "/css/**", "/js/**", "/h2-console/**").permitAll()
                .requestMatchers("/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/login")
                .defaultSuccessUrl("/home", true)
                .failureHandler(failureHandler)
                .permitAll()
            )
            .logout(logout -> logout.permitAll())
            .csrf(csrf -> csrf.disable()) // Allow H2 console
            .headers(headers -> headers.frameOptions().disable()); // Allow H2 console

        return http.build();
    }
}

**********************************************************************************************************

package com.test.spring.boot.exception;

public class UserNotApprovedException extends RuntimeException {
    public UserNotApprovedException(String message) {
        super(message);
    }
}

***************************************

package com.test.spring.boot.config;

import com.test.spring.boot.exception.UserNotApprovedException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.*;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class CustomAuthFailureHandler implements AuthenticationFailureHandler {

    @Override
    public void onAuthenticationFailure(HttpServletRequest request,
                                         HttpServletResponse response,
                                         AuthenticationException exception)
            throws IOException, ServletException {

        String redirectUrl = "/login?error";

        if (exception.getCause() instanceof UserNotApprovedException ||
            exception instanceof UserNotApprovedException) {
            redirectUrl = "/login?error=pending";
        }

        response.sendRedirect(redirectUrl);
    }
}

****************************************************************






spring.datasource.url=jdbc:h2:file:./data/testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console





*******************************************************************

package com.test.spring.boot.controller;

import com.test.spring.boot.model.User;
import com.test.spring.boot.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
public class AuthController {

    @Autowired
    private UserService userService;

    // For displaying the login/signup page
    @GetMapping("/login")
    public String loginPage(Model model) {
        model.addAttribute("user", new User());
        return "login"; // login.html (contains both login + signup)
    }

    // Handles form submission for signup
    @PostMapping("/signup")
    public String processSignup(@ModelAttribute User user, Model model) {
        userService.registerUser(user);
        model.addAttribute("message", "Signup successful! Awaiting admin approval.");
        return "login";
    }

    // After login success
    @GetMapping("/home")
    public String home(Authentication auth, Model model) {
        model.addAttribute("username", auth.getName());
        return "home"; // Replace with your post-login landing page
    }
}
*******************************************************************





































<form class="flip-card__form" th:action="@{/signup}" method="post" th:object="${user}">
    <input class="flip-card__input" th:field="*{fullName}" placeholder="Name" type="text"/>
    <input class="flip-card__input" th:field="*{username}" placeholder="Email" type="text"/>
    <input class="flip-card__input" th:field="*{password}" placeholder="Password" type="password"/>
    <button class="flip-card__btn">Confirm!</button>
</form>

***************************************************

@GetMapping("/login")
public String loginPage(Model model) {
    model.addAttribute("user", new User()); // for signup form
    return "login";
}

@PostMapping("/signup")
public String processSignup(@ModelAttribute User user, Model model) {
    userService.registerUser(user); // save user with PENDING status
    model.addAttribute("message", "Signup successful! Awaiting admin approval.");
    return "login"; // return to login screen
}


****************************************************************

public void registerUser(User user) {
    user.setPassword(passwordEncoder.encode(user.getPassword()));
    user.setStatus(User.Status.PENDING);
    userRepository.save(user);
}

*****************************************************************

package com.test.spring.boot.model;

import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true)
    private String username;

    private String password;
    private String fullName;

    @Enumerated(EnumType.STRING)
    private Status status;

    public enum Status {
        PENDING,
        APPROVED
    }

    // Getters and Setters
    public Long getId() { return id; }

    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }

    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }

    public void setPassword(String password) { this.password = password; }

    public String getFullName() { return fullName; }

    public void setFullName(String fullName) { this.fullName = fullName; }

    public Status getStatus() { return status; }

    public void setStatus(Status status) { this.status = status; }
}


***************************************************************************

package com.test.spring.boot.service;

import com.test.spring.boot.model.User;
import com.test.spring.boot.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository repo;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public void registerUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setStatus(User.Status.PENDING);
        repo.save(user);
    }

    public Optional<User> getByUsername(String username) {
        return repo.findByUsername(username);
    }

    public List<User> getPendingUsers() {
        return repo.findAll().stream()
            .filter(u -> u.getStatus() == User.Status.PENDING)
            .toList();
    }

    public void approveUser(Long id) {
        repo.findById(id).ifPresent(user -> {
            user.setStatus(User.Status.APPROVED);
            repo.save(user);
        });
    }
}

*******************************************

package com.test.spring.boot.repository;

import com.test.spring.boot.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}


****************************************************************

